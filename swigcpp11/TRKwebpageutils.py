# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _TRKwebpageutils
else:
    import _TRKwebpageutils

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TRKwebpageutils.delete_SwigPyIterator

    def value(self):
        return _TRKwebpageutils.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TRKwebpageutils.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TRKwebpageutils.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TRKwebpageutils.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TRKwebpageutils.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TRKwebpageutils.SwigPyIterator_copy(self)

    def next(self):
        return _TRKwebpageutils.SwigPyIterator_next(self)

    def __next__(self):
        return _TRKwebpageutils.SwigPyIterator___next__(self)

    def previous(self):
        return _TRKwebpageutils.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TRKwebpageutils.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TRKwebpageutils.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TRKwebpageutils.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TRKwebpageutils.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TRKwebpageutils.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TRKwebpageutils.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TRKwebpageutils.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _TRKwebpageutils:
_TRKwebpageutils.SwigPyIterator_swigregister(SwigPyIterator)


def getPriors(priorsCheck, priorsParams, hasPriorsVec, paramCount):
    return _TRKwebpageutils.getPriors(priorsCheck, priorsParams, hasPriorsVec, paramCount)

def requestHandler(fType, x, y, w, sx, sy, allparamsguess, dataSize, pivotCheck, priorsCheck, priorsParams, hasPriorsVec, opScale, findUncertainties, fitScale):
    return _TRKwebpageutils.requestHandler(fType, x, y, w, sx, sy, allparamsguess, dataSize, pivotCheck, priorsCheck, priorsParams, hasPriorsVec, opScale, findUncertainties, fitScale)

def linear(x, params):
    return _TRKwebpageutils.linear(x, params)

def dLinear(x, params):
    return _TRKwebpageutils.dLinear(x, params)

def ddLinear(x, params):
    return _TRKwebpageutils.ddLinear(x, params)

def linearIntercept(params):
    return _TRKwebpageutils.linearIntercept(params)

def linearSlope(params):
    return _TRKwebpageutils.linearSlope(params)

def quadratic(x, params):
    return _TRKwebpageutils.quadratic(x, params)

def dQuadratic(x, params):
    return _TRKwebpageutils.dQuadratic(x, params)

def ddQuadratic(x, params):
    return _TRKwebpageutils.ddQuadratic(x, params)

def cubic(x, params):
    return _TRKwebpageutils.cubic(x, params)

def dCubic(x, params):
    return _TRKwebpageutils.dCubic(x, params)

def ddCubic(x, params):
    return _TRKwebpageutils.ddCubic(x, params)

def powerlaw(x, params):
    return _TRKwebpageutils.powerlaw(x, params)

def dPowerlaw(x, params):
    return _TRKwebpageutils.dPowerlaw(x, params)

def ddPowerlaw(x, params):
    return _TRKwebpageutils.ddPowerlaw(x, params)

def powerlawIntercept(params):
    return _TRKwebpageutils.powerlawIntercept(params)

def powerlawSlope(params):
    return _TRKwebpageutils.powerlawSlope(params)

def exponential(x, params):
    return _TRKwebpageutils.exponential(x, params)

def dExponential(x, params):
    return _TRKwebpageutils.dExponential(x, params)

def ddExponential(x, params):
    return _TRKwebpageutils.ddExponential(x, params)

def exponentialIntercept(params):
    return _TRKwebpageutils.exponentialIntercept(params)

def exponentialSlope(params):
    return _TRKwebpageutils.exponentialSlope(params)

def logarithmic(x, params):
    return _TRKwebpageutils.logarithmic(x, params)

def dLogarithmic(x, params):
    return _TRKwebpageutils.dLogarithmic(x, params)

def ddLogarithmic(x, params):
    return _TRKwebpageutils.ddLogarithmic(x, params)

def logarithmicIntercept(params):
    return _TRKwebpageutils.logarithmicIntercept(params)

def logarithmicSlope(params):
    return _TRKwebpageutils.logarithmicSlope(params)
S = _TRKwebpageutils.S
slopx = _TRKwebpageutils.slopx
slopy = _TRKwebpageutils.slopy
none = _TRKwebpageutils.none
CUSTOM = _TRKwebpageutils.CUSTOM
GAUSSIAN = _TRKwebpageutils.GAUSSIAN
CONSTRAINED = _TRKwebpageutils.CONSTRAINED
MIXED = _TRKwebpageutils.MIXED
class Priors(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TRKwebpageutils.Priors_swiginit(self, _TRKwebpageutils.new_Priors(*args))
    priorType = property(_TRKwebpageutils.Priors_priorType_get, _TRKwebpageutils.Priors_priorType_set)
    gaussianParams = property(_TRKwebpageutils.Priors_gaussianParams_get, _TRKwebpageutils.Priors_gaussianParams_set)
    paramBounds = property(_TRKwebpageutils.Priors_paramBounds_get, _TRKwebpageutils.Priors_paramBounds_set)
    priorsPDFs = property(_TRKwebpageutils.Priors_priorsPDFs_get, _TRKwebpageutils.Priors_priorsPDFs_set)
    __swig_destroy__ = _TRKwebpageutils.delete_Priors

# Register Priors in _TRKwebpageutils:
_TRKwebpageutils.Priors_swigregister(Priors)
cvar = _TRKwebpageutils.cvar
PI = cvar.PI
SIGMAS = cvar.SIGMAS

class Results(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bestFitParams = property(_TRKwebpageutils.Results_bestFitParams_get, _TRKwebpageutils.Results_bestFitParams_set)
    slop_x = property(_TRKwebpageutils.Results_slop_x_get, _TRKwebpageutils.Results_slop_x_set)
    slop_y = property(_TRKwebpageutils.Results_slop_y_get, _TRKwebpageutils.Results_slop_y_set)
    optimumScale = property(_TRKwebpageutils.Results_optimumScale_get, _TRKwebpageutils.Results_optimumScale_set)
    minimumScale = property(_TRKwebpageutils.Results_minimumScale_get, _TRKwebpageutils.Results_minimumScale_set)
    maximumScale = property(_TRKwebpageutils.Results_maximumScale_get, _TRKwebpageutils.Results_maximumScale_set)
    pivot = property(_TRKwebpageutils.Results_pivot_get, _TRKwebpageutils.Results_pivot_set)
    bestFit_123Sigmas = property(_TRKwebpageutils.Results_bestFit_123Sigmas_get, _TRKwebpageutils.Results_bestFit_123Sigmas_set)
    slopX_123Sigmas = property(_TRKwebpageutils.Results_slopX_123Sigmas_get, _TRKwebpageutils.Results_slopX_123Sigmas_set)
    slopY_123Sigmas = property(_TRKwebpageutils.Results_slopY_123Sigmas_get, _TRKwebpageutils.Results_slopY_123Sigmas_set)
    paramDistributionHistograms = property(_TRKwebpageutils.Results_paramDistributionHistograms_get, _TRKwebpageutils.Results_paramDistributionHistograms_set)

    def __init__(self):
        _TRKwebpageutils.Results_swiginit(self, _TRKwebpageutils.new_Results())
    __swig_destroy__ = _TRKwebpageutils.delete_Results

# Register Results in _TRKwebpageutils:
_TRKwebpageutils.Results_swigregister(Results)

class TRK(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TRKwebpageutils.TRK_swiginit(self, _TRKwebpageutils.new_TRK(*args))
    N = property(_TRKwebpageutils.TRK_N_get, _TRKwebpageutils.TRK_N_set)
    M = property(_TRKwebpageutils.TRK_M_get, _TRKwebpageutils.TRK_M_set)
    SigXVec = property(_TRKwebpageutils.TRK_SigXVec_get, _TRKwebpageutils.TRK_SigXVec_set)
    SigYVec = property(_TRKwebpageutils.TRK_SigYVec_get, _TRKwebpageutils.TRK_SigYVec_set)
    x = property(_TRKwebpageutils.TRK_x_get, _TRKwebpageutils.TRK_x_set)
    y = property(_TRKwebpageutils.TRK_y_get, _TRKwebpageutils.TRK_y_set)
    sx = property(_TRKwebpageutils.TRK_sx_get, _TRKwebpageutils.TRK_sx_set)
    sy = property(_TRKwebpageutils.TRK_sy_get, _TRKwebpageutils.TRK_sy_set)
    w = property(_TRKwebpageutils.TRK_w_get, _TRKwebpageutils.TRK_w_set)
    datawidth = property(_TRKwebpageutils.TRK_datawidth_get, _TRKwebpageutils.TRK_datawidth_set)
    x_min = property(_TRKwebpageutils.TRK_x_min_get, _TRKwebpageutils.TRK_x_min_set)
    x_max = property(_TRKwebpageutils.TRK_x_max_get, _TRKwebpageutils.TRK_x_max_set)

    def getDataWidth(self):
        return _TRKwebpageutils.TRK_getDataWidth(self)

    def performTRKFit(self, *args):
        return _TRKwebpageutils.TRK_performTRKFit(self, *args)

    def performSimpleTRKFit(self, *args):
        return _TRKwebpageutils.TRK_performSimpleTRKFit(self, *args)
    results = property(_TRKwebpageutils.TRK_results_get, _TRKwebpageutils.TRK_results_set)

    def avoidNegativeSlop(self, vertex, n):
        return _TRKwebpageutils.TRK_avoidNegativeSlop(self, vertex, n)

    def pegToZeroSlop(self, vertex):
        return _TRKwebpageutils.TRK_pegToZeroSlop(self, vertex)

    def evalWPriors(self, f, vertex, s):
        return _TRKwebpageutils.TRK_evalWPriors(self, f, vertex, s)
    simplex_size = property(_TRKwebpageutils.TRK_simplex_size_get, _TRKwebpageutils.TRK_simplex_size_set)
    s = property(_TRKwebpageutils.TRK_s_get, _TRKwebpageutils.TRK_s_set)
    s_sx = property(_TRKwebpageutils.TRK_s_sx_get, _TRKwebpageutils.TRK_s_sx_set)
    s_sy = property(_TRKwebpageutils.TRK_s_sy_get, _TRKwebpageutils.TRK_s_sy_set)
    a = property(_TRKwebpageutils.TRK_a_get, _TRKwebpageutils.TRK_a_set)
    b = property(_TRKwebpageutils.TRK_b_get, _TRKwebpageutils.TRK_b_set)
    whichExtrema = property(_TRKwebpageutils.TRK_whichExtrema_get, _TRKwebpageutils.TRK_whichExtrema_set)
    whichExtremaX = property(_TRKwebpageutils.TRK_whichExtremaX_get, _TRKwebpageutils.TRK_whichExtremaX_set)
    whichExtremaY = property(_TRKwebpageutils.TRK_whichExtremaY_get, _TRKwebpageutils.TRK_whichExtremaY_set)
    pegToZeroTol = property(_TRKwebpageutils.TRK_pegToZeroTol_get, _TRKwebpageutils.TRK_pegToZeroTol_set)
    slopTol = property(_TRKwebpageutils.TRK_slopTol_get, _TRKwebpageutils.TRK_slopTol_set)
    simplexTol = property(_TRKwebpageutils.TRK_simplexTol_get, _TRKwebpageutils.TRK_simplexTol_set)
    x_t_slopx = property(_TRKwebpageutils.TRK_x_t_slopx_get, _TRKwebpageutils.TRK_x_t_slopx_set)
    x_t_slopy = property(_TRKwebpageutils.TRK_x_t_slopy_get, _TRKwebpageutils.TRK_x_t_slopy_set)
    x_t_a = property(_TRKwebpageutils.TRK_x_t_a_get, _TRKwebpageutils.TRK_x_t_a_set)
    x_t_b = property(_TRKwebpageutils.TRK_x_t_b_get, _TRKwebpageutils.TRK_x_t_b_set)
    x_t_s = property(_TRKwebpageutils.TRK_x_t_s_get, _TRKwebpageutils.TRK_x_t_s_set)
    params_slopx = property(_TRKwebpageutils.TRK_params_slopx_get, _TRKwebpageutils.TRK_params_slopx_set)
    params_slopy = property(_TRKwebpageutils.TRK_params_slopy_get, _TRKwebpageutils.TRK_params_slopy_set)
    params_a = property(_TRKwebpageutils.TRK_params_a_get, _TRKwebpageutils.TRK_params_a_set)
    params_b = property(_TRKwebpageutils.TRK_params_b_get, _TRKwebpageutils.TRK_params_b_set)
    params_s = property(_TRKwebpageutils.TRK_params_s_get, _TRKwebpageutils.TRK_params_s_set)
    allparams_s = property(_TRKwebpageutils.TRK_allparams_s_get, _TRKwebpageutils.TRK_allparams_s_set)
    iterative_allparams_guess = property(_TRKwebpageutils.TRK_iterative_allparams_guess_get, _TRKwebpageutils.TRK_iterative_allparams_guess_set)
    params_guess = property(_TRKwebpageutils.TRK_params_guess_get, _TRKwebpageutils.TRK_params_guess_set)
    params_sigmas_guess = property(_TRKwebpageutils.TRK_params_sigmas_guess_get, _TRKwebpageutils.TRK_params_sigmas_guess_set)
    slop_x_guess = property(_TRKwebpageutils.TRK_slop_x_guess_get, _TRKwebpageutils.TRK_slop_x_guess_set)
    slop_y_guess = property(_TRKwebpageutils.TRK_slop_y_guess_get, _TRKwebpageutils.TRK_slop_y_guess_set)
    slop_x_sigma_guess = property(_TRKwebpageutils.TRK_slop_x_sigma_guess_get, _TRKwebpageutils.TRK_slop_x_sigma_guess_set)
    slop_y_sigma_guess = property(_TRKwebpageutils.TRK_slop_y_sigma_guess_get, _TRKwebpageutils.TRK_slop_y_sigma_guess_set)
    allparams_guess = property(_TRKwebpageutils.TRK_allparams_guess_get, _TRKwebpageutils.TRK_allparams_guess_set)
    allparams_sigmas_guess = property(_TRKwebpageutils.TRK_allparams_sigmas_guess_get, _TRKwebpageutils.TRK_allparams_sigmas_guess_set)

    def downhillSimplex(self, f, allparams_guess, s):
        return _TRKwebpageutils.TRK_downhillSimplex(self, f, allparams_guess, s)

    def innerSlopX_Simplex(self, ss, allparams_guess):
        return _TRKwebpageutils.TRK_innerSlopX_Simplex(self, ss, allparams_guess)

    def innerSlopY_Simplex(self, ss, allparams_guess):
        return _TRKwebpageutils.TRK_innerSlopY_Simplex(self, ss, allparams_guess)

    def innerR2_iter_Simplex(self, ss, allparams_guess, s0):
        return _TRKwebpageutils.TRK_innerR2_iter_Simplex(self, ss, allparams_guess, s0)

    def iterateR2_OptimumScale(self, s0):
        return _TRKwebpageutils.TRK_iterateR2_OptimumScale(self, s0)
    firstGuess = property(_TRKwebpageutils.TRK_firstGuess_get, _TRKwebpageutils.TRK_firstGuess_set)
    slopYGuess = property(_TRKwebpageutils.TRK_slopYGuess_get, _TRKwebpageutils.TRK_slopYGuess_set)
    slopYScaleGuess = property(_TRKwebpageutils.TRK_slopYScaleGuess_get, _TRKwebpageutils.TRK_slopYScaleGuess_set)

    def getBetterSlopYGuess(self, slop_y, s):
        return _TRKwebpageutils.TRK_getBetterSlopYGuess(self, slop_y, s)

    def optimizeScale(self):
        return _TRKwebpageutils.TRK_optimizeScale(self)

    def optimize_s_SlopX(self):
        return _TRKwebpageutils.TRK_optimize_s_SlopX(self)

    def optimize_s_SlopY(self):
        return _TRKwebpageutils.TRK_optimize_s_SlopY(self)
    optimizeList = property(_TRKwebpageutils.TRK_optimizeList_get, _TRKwebpageutils.TRK_optimizeList_set)

    def optimize_s0_R2(self):
        return _TRKwebpageutils.TRK_optimize_s0_R2(self)

    def optimize_s_prime_R2(self, s0):
        return _TRKwebpageutils.TRK_optimize_s_prime_R2(self, s0)

    def getBetterGuess(self):
        return _TRKwebpageutils.TRK_getBetterGuess(self)

    def innerR2_Simplex(self, ss, allparams_guess):
        return _TRKwebpageutils.TRK_innerR2_Simplex(self, ss, allparams_guess)

    def findCentroid(self, vertices):
        return _TRKwebpageutils.TRK_findCentroid(self, vertices)

    def R2TRK_prime_as(self):
        return _TRKwebpageutils.TRK_R2TRK_prime_as(self)

    def R2TRK_prime_sb(self):
        return _TRKwebpageutils.TRK_R2TRK_prime_sb(self)

    def R2TRK_prime_as0(self, s0, x_t_s0, params_s0):
        return _TRKwebpageutils.TRK_R2TRK_prime_as0(self, s0, x_t_s0, params_s0)

    def R2TRK_prime_s0b(self, s0, x_t_s0, params_s0):
        return _TRKwebpageutils.TRK_R2TRK_prime_s0b(self, s0, x_t_s0, params_s0)

    def findBestTangent(self, params, x_n, y_n, Sig_xn2, Sig_yn2, x_tn_vec):
        return _TRKwebpageutils.TRK_findBestTangent(self, params, x_n, y_n, Sig_xn2, Sig_yn2, x_tn_vec)

    def approxQuadraticRoots(self, params, x_n, y_n, Sig_xn2, Sig_yn2, xr1):
        return _TRKwebpageutils.TRK_approxQuadraticRoots(self, params, x_n, y_n, Sig_xn2, Sig_yn2, xr1)

    def tangentsFinder(self, params, x_n, y_n, Sig_xn2, Sig_yn2, xg):
        return _TRKwebpageutils.TRK_tangentsFinder(self, params, x_n, y_n, Sig_xn2, Sig_yn2, xg)

    def twoPointNR(self, params, x_n, y_n, Sig_xn2, Sig_yn2, xguess, xguessp1):
        return _TRKwebpageutils.TRK_twoPointNR(self, params, x_n, y_n, Sig_xn2, Sig_yn2, xguess, xguessp1)

    def newtonRaphson(self, params, x_n, y_n, Sig_xn2, Sig_yn2, xguess):
        return _TRKwebpageutils.TRK_newtonRaphson(self, params, x_n, y_n, Sig_xn2, Sig_yn2, xguess)

    def tangentCubicSolver(self, A, B, C, D):
        return _TRKwebpageutils.TRK_tangentCubicSolver(self, A, B, C, D)
    root_bound = property(_TRKwebpageutils.TRK_root_bound_get, _TRKwebpageutils.TRK_root_bound_set)

    def tangentParallel(self, params, slop_x, slop_y, n, s):
        return _TRKwebpageutils.TRK_tangentParallel(self, params, slop_x, slop_y, n, s)
    hasPriors = property(_TRKwebpageutils.TRK_hasPriors_get, _TRKwebpageutils.TRK_hasPriors_set)
    priorsObject = property(_TRKwebpageutils.TRK_priorsObject_get, _TRKwebpageutils.TRK_priorsObject_set)

    def regularChiSquared(self, params):
        return _TRKwebpageutils.TRK_regularChiSquared(self, params)

    def modifiedChiSquared(self, allparams, s):
        return _TRKwebpageutils.TRK_modifiedChiSquared(self, allparams, s)

    def normal(self, x, mu, sig):
        return _TRKwebpageutils.TRK_normal(self, x, mu, sig)

    def singlePointLnL(self, params, x_n, y_n, Sig_xn2, Sig_yn2, x_tn):
        return _TRKwebpageutils.TRK_singlePointLnL(self, params, x_n, y_n, Sig_xn2, Sig_yn2, x_tn)

    def likelihood(self, allparams):
        return _TRKwebpageutils.TRK_likelihood(self, allparams)

    def priors(self, allparams):
        return _TRKwebpageutils.TRK_priors(self, allparams)

    def posterior(self, allparams):
        return _TRKwebpageutils.TRK_posterior(self, allparams)

    def stDevUnweighted(self, x):
        return _TRKwebpageutils.TRK_stDevUnweighted(self, x)

    def tangentParallelLikelihood(self, params, slop_x, slop_y, n):
        return _TRKwebpageutils.TRK_tangentParallelLikelihood(self, params, slop_x, slop_y, n)

    def getMedian(self, *args):
        return _TRKwebpageutils.TRK_getMedian(self, *args)

    def getAverage(self, *args):
        return _TRKwebpageutils.TRK_getAverage(self, *args)

    def min(self, a, b):
        return _TRKwebpageutils.TRK_min(self, a, b)

    def max(self, a, b):
        return _TRKwebpageutils.TRK_max(self, a, b)

    def isEqual(self, x, y, maxRelativeError, maxAbsoluteError):
        return _TRKwebpageutils.TRK_isEqual(self, x, y, maxRelativeError, maxAbsoluteError)

    def getMode(self, trueCount, w, y):
        return _TRKwebpageutils.TRK_getMode(self, trueCount, w, y)

    def getHistogram(self, *args):
        return _TRKwebpageutils.TRK_getHistogram(self, *args)
    yc = property(_TRKwebpageutils.TRK_yc_get, _TRKwebpageutils.TRK_yc_set)
    dyc = property(_TRKwebpageutils.TRK_dyc_get, _TRKwebpageutils.TRK_dyc_set)
    ddyc = property(_TRKwebpageutils.TRK_ddyc_get, _TRKwebpageutils.TRK_ddyc_set)

    def methastPosterior(self, R, burncount, sigmas_guess):
        return _TRKwebpageutils.TRK_methastPosterior(self, R, burncount, sigmas_guess)

    def checkSlopSignMCMC(self, result_final):
        return _TRKwebpageutils.TRK_checkSlopSignMCMC(self, result_final)

    def pegToNonZeroDelta(self, vertex, lastvertex):
        return _TRKwebpageutils.TRK_pegToNonZeroDelta(self, vertex, lastvertex)

    def optimizeMetHastDeltas(self, burncount, delta_guess):
        return _TRKwebpageutils.TRK_optimizeMetHastDeltas(self, burncount, delta_guess)

    def innerMetHastSimplex(self, burncount, delta, best_ratio):
        return _TRKwebpageutils.TRK_innerMetHastSimplex(self, burncount, delta, best_ratio)

    def rnorm(self, mu, sig):
        return _TRKwebpageutils.TRK_rnorm(self, mu, sig)

    def runiform(self, a, b):
        return _TRKwebpageutils.TRK_runiform(self, a, b)

    def lowerBar(self, allparam_samples):
        return _TRKwebpageutils.TRK_lowerBar(self, allparam_samples)

    def calculateUncertainties(self):
        return _TRKwebpageutils.TRK_calculateUncertainties(self)
    allParamsFinalDeltas = property(_TRKwebpageutils.TRK_allParamsFinalDeltas_get, _TRKwebpageutils.TRK_allParamsFinalDeltas_set)
    goodDeltasFound = property(_TRKwebpageutils.TRK_goodDeltasFound_get, _TRKwebpageutils.TRK_goodDeltasFound_set)

    def guessMCMCDeltas(self):
        return _TRKwebpageutils.TRK_guessMCMCDeltas(self)
    R = property(_TRKwebpageutils.TRK_R_get, _TRKwebpageutils.TRK_R_set)
    burncount = property(_TRKwebpageutils.TRK_burncount_get, _TRKwebpageutils.TRK_burncount_set)
    best_ratio = property(_TRKwebpageutils.TRK_best_ratio_get, _TRKwebpageutils.TRK_best_ratio_set)
    simplexSuperShrink = property(_TRKwebpageutils.TRK_simplexSuperShrink_get, _TRKwebpageutils.TRK_simplexSuperShrink_set)
    NDcombos = property(_TRKwebpageutils.TRK_NDcombos_get, _TRKwebpageutils.TRK_NDcombos_set)
    NDcombination = property(_TRKwebpageutils.TRK_NDcombination_get, _TRKwebpageutils.TRK_NDcombination_set)

    def getCombos(self, total, k, offset):
        return _TRKwebpageutils.TRK_getCombos(self, total, k, offset)

    def findPivots(self):
        return _TRKwebpageutils.TRK_findPivots(self)
    pivot = property(_TRKwebpageutils.TRK_pivot_get, _TRKwebpageutils.TRK_pivot_set)
    pivotTol = property(_TRKwebpageutils.TRK_pivotTol_get, _TRKwebpageutils.TRK_pivotTol_set)

    def weightPivot(self, params1, params2, oldPivots, newPivot):
        return _TRKwebpageutils.TRK_weightPivot(self, params1, params2, oldPivots, newPivot)

    def pivotFunc(self, params1, params2):
        return _TRKwebpageutils.TRK_pivotFunc(self, params1, params2)

    def directCombos(self, params_sample, comboCount):
        return _TRKwebpageutils.TRK_directCombos(self, params_sample, comboCount)

    def removeOutlierPivots(self, pivots):
        return _TRKwebpageutils.TRK_removeOutlierPivots(self, pivots)
    linearizedIntercept = property(_TRKwebpageutils.TRK_linearizedIntercept_get, _TRKwebpageutils.TRK_linearizedIntercept_set)
    linearizedSlope = property(_TRKwebpageutils.TRK_linearizedSlope_get, _TRKwebpageutils.TRK_linearizedSlope_set)
    getCombosFromSampleDirectly = property(_TRKwebpageutils.TRK_getCombosFromSampleDirectly_get, _TRKwebpageutils.TRK_getCombosFromSampleDirectly_set)
    weightPivots = property(_TRKwebpageutils.TRK_weightPivots_get, _TRKwebpageutils.TRK_weightPivots_set)
    writePivots = property(_TRKwebpageutils.TRK_writePivots_get, _TRKwebpageutils.TRK_writePivots_set)
    pivotMedian = property(_TRKwebpageutils.TRK_pivotMedian_get, _TRKwebpageutils.TRK_pivotMedian_set)
    pivotMean = property(_TRKwebpageutils.TRK_pivotMean_get, _TRKwebpageutils.TRK_pivotMean_set)
    pruneOutlierPivots = property(_TRKwebpageutils.TRK_pruneOutlierPivots_get, _TRKwebpageutils.TRK_pruneOutlierPivots_set)
    pruneWidth = property(_TRKwebpageutils.TRK_pruneWidth_get, _TRKwebpageutils.TRK_pruneWidth_set)
    pivotR = property(_TRKwebpageutils.TRK_pivotR_get, _TRKwebpageutils.TRK_pivotR_set)
    randomSampleCount = property(_TRKwebpageutils.TRK_randomSampleCount_get, _TRKwebpageutils.TRK_randomSampleCount_set)
    maxCombos = property(_TRKwebpageutils.TRK_maxCombos_get, _TRKwebpageutils.TRK_maxCombos_set)
    maxPivotIter = property(_TRKwebpageutils.TRK_maxPivotIter_get, _TRKwebpageutils.TRK_maxPivotIter_set)
    pivotBurnIn = property(_TRKwebpageutils.TRK_pivotBurnIn_get, _TRKwebpageutils.TRK_pivotBurnIn_set)
    pivotHalfSampleMode = property(_TRKwebpageutils.TRK_pivotHalfSampleMode_get, _TRKwebpageutils.TRK_pivotHalfSampleMode_set)
    modeInterceptGuess = property(_TRKwebpageutils.TRK_modeInterceptGuess_get, _TRKwebpageutils.TRK_modeInterceptGuess_set)
    averageIntercepts = property(_TRKwebpageutils.TRK_averageIntercepts_get, _TRKwebpageutils.TRK_averageIntercepts_set)

    def getPivotGuess(self):
        return _TRKwebpageutils.TRK_getPivotGuess(self)
    pivotPointActive = property(_TRKwebpageutils.TRK_pivotPointActive_get, _TRKwebpageutils.TRK_pivotPointActive_set)
    pivotPointParamsGuess = property(_TRKwebpageutils.TRK_pivotPointParamsGuess_get, _TRKwebpageutils.TRK_pivotPointParamsGuess_set)

    def getPeakCoord(self, x, w):
        return _TRKwebpageutils.TRK_getPeakCoord(self, x, w)
    outputDistributionToFile = property(_TRKwebpageutils.TRK_outputDistributionToFile_get, _TRKwebpageutils.TRK_outputDistributionToFile_set)
    cpp17MultiThread = property(_TRKwebpageutils.TRK_cpp17MultiThread_get, _TRKwebpageutils.TRK_cpp17MultiThread_set)
    cpp11MultiThread = property(_TRKwebpageutils.TRK_cpp11MultiThread_get, _TRKwebpageutils.TRK_cpp11MultiThread_set)
    openMPMultiThread = property(_TRKwebpageutils.TRK_openMPMultiThread_get, _TRKwebpageutils.TRK_openMPMultiThread_set)
    findPivotPoints = property(_TRKwebpageutils.TRK_findPivotPoints_get, _TRKwebpageutils.TRK_findPivotPoints_set)
    maxThreads = property(_TRKwebpageutils.TRK_maxThreads_get, _TRKwebpageutils.TRK_maxThreads_set)
    __swig_destroy__ = _TRKwebpageutils.delete_TRK

# Register TRK in _TRKwebpageutils:
_TRKwebpageutils.TRK_swigregister(TRK)


def noPrior(param):
    return _TRKwebpageutils.noPrior(param)

def minMax(vec):
    return _TRKwebpageutils.minMax(vec)

def argMinMax(x):
    return _TRKwebpageutils.argMinMax(x)

def twoPointNR(y, dy, ddy, params, xguess, xguessp1):
    return _TRKwebpageutils.twoPointNR(y, dy, ddy, params, xguess, xguessp1)

def cubicSolver(A, B, C, D):
    return _TRKwebpageutils.cubicSolver(A, B, C, D)

def startTimer():
    return _TRKwebpageutils.startTimer()

def secElapsed(t_i):
    return _TRKwebpageutils.secElapsed(t_i)

def writeResults(TRKobj, t_sec, filename):
    return _TRKwebpageutils.writeResults(TRKobj, t_sec, filename)

def toRad(deg):
    return _TRKwebpageutils.toRad(deg)

def toDeg(rad):
    return _TRKwebpageutils.toDeg(rad)

def getData(*args):
    return _TRKwebpageutils.getData(*args)
class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TRKwebpageutils.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TRKwebpageutils.IntVector___nonzero__(self)

    def __bool__(self):
        return _TRKwebpageutils.IntVector___bool__(self)

    def __len__(self):
        return _TRKwebpageutils.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _TRKwebpageutils.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TRKwebpageutils.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TRKwebpageutils.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TRKwebpageutils.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TRKwebpageutils.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TRKwebpageutils.IntVector___setitem__(self, *args)

    def pop(self):
        return _TRKwebpageutils.IntVector_pop(self)

    def append(self, x):
        return _TRKwebpageutils.IntVector_append(self, x)

    def empty(self):
        return _TRKwebpageutils.IntVector_empty(self)

    def size(self):
        return _TRKwebpageutils.IntVector_size(self)

    def swap(self, v):
        return _TRKwebpageutils.IntVector_swap(self, v)

    def begin(self):
        return _TRKwebpageutils.IntVector_begin(self)

    def end(self):
        return _TRKwebpageutils.IntVector_end(self)

    def rbegin(self):
        return _TRKwebpageutils.IntVector_rbegin(self)

    def rend(self):
        return _TRKwebpageutils.IntVector_rend(self)

    def clear(self):
        return _TRKwebpageutils.IntVector_clear(self)

    def get_allocator(self):
        return _TRKwebpageutils.IntVector_get_allocator(self)

    def pop_back(self):
        return _TRKwebpageutils.IntVector_pop_back(self)

    def erase(self, *args):
        return _TRKwebpageutils.IntVector_erase(self, *args)

    def __init__(self, *args):
        _TRKwebpageutils.IntVector_swiginit(self, _TRKwebpageutils.new_IntVector(*args))

    def push_back(self, x):
        return _TRKwebpageutils.IntVector_push_back(self, x)

    def front(self):
        return _TRKwebpageutils.IntVector_front(self)

    def back(self):
        return _TRKwebpageutils.IntVector_back(self)

    def assign(self, n, x):
        return _TRKwebpageutils.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _TRKwebpageutils.IntVector_resize(self, *args)

    def insert(self, *args):
        return _TRKwebpageutils.IntVector_insert(self, *args)

    def reserve(self, n):
        return _TRKwebpageutils.IntVector_reserve(self, n)

    def capacity(self):
        return _TRKwebpageutils.IntVector_capacity(self)
    __swig_destroy__ = _TRKwebpageutils.delete_IntVector

# Register IntVector in _TRKwebpageutils:
_TRKwebpageutils.IntVector_swigregister(IntVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _TRKwebpageutils.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _TRKwebpageutils.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _TRKwebpageutils.DoubleVector___bool__(self)

    def __len__(self):
        return _TRKwebpageutils.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _TRKwebpageutils.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _TRKwebpageutils.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _TRKwebpageutils.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _TRKwebpageutils.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _TRKwebpageutils.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _TRKwebpageutils.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _TRKwebpageutils.DoubleVector_pop(self)

    def append(self, x):
        return _TRKwebpageutils.DoubleVector_append(self, x)

    def empty(self):
        return _TRKwebpageutils.DoubleVector_empty(self)

    def size(self):
        return _TRKwebpageutils.DoubleVector_size(self)

    def swap(self, v):
        return _TRKwebpageutils.DoubleVector_swap(self, v)

    def begin(self):
        return _TRKwebpageutils.DoubleVector_begin(self)

    def end(self):
        return _TRKwebpageutils.DoubleVector_end(self)

    def rbegin(self):
        return _TRKwebpageutils.DoubleVector_rbegin(self)

    def rend(self):
        return _TRKwebpageutils.DoubleVector_rend(self)

    def clear(self):
        return _TRKwebpageutils.DoubleVector_clear(self)

    def get_allocator(self):
        return _TRKwebpageutils.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _TRKwebpageutils.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _TRKwebpageutils.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _TRKwebpageutils.DoubleVector_swiginit(self, _TRKwebpageutils.new_DoubleVector(*args))

    def push_back(self, x):
        return _TRKwebpageutils.DoubleVector_push_back(self, x)

    def front(self):
        return _TRKwebpageutils.DoubleVector_front(self)

    def back(self):
        return _TRKwebpageutils.DoubleVector_back(self)

    def assign(self, n, x):
        return _TRKwebpageutils.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _TRKwebpageutils.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _TRKwebpageutils.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _TRKwebpageutils.DoubleVector_reserve(self, n)

    def capacity(self):
        return _TRKwebpageutils.DoubleVector_capacity(self)
    __swig_destroy__ = _TRKwebpageutils.delete_DoubleVector

# Register DoubleVector in _TRKwebpageutils:
_TRKwebpageutils.DoubleVector_swigregister(DoubleVector)



